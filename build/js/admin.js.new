// Admin Panel - Consolidated Version

// Global state
let adminInitialized = false;
const API_BASE_URL = (window.API_BASE_URL || '').replace(/\/$/, '');

// Helper function to make API requests
async function makeApiRequest(endpoint, options = {}) {
    const url = `${API_BASE_URL}${endpoint}`;
    const token = localStorage.getItem('trauma_auth_token');
    
    const defaultOptions = {
        credentials: 'include',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            ...(token && { 'Authorization': `Bearer ${token}` })
        },
        ...options
    };
    
    try {
        const response = await fetch(url, defaultOptions);
        const responseText = await response.text();
        
        if (!response.ok) {
            throw new Error(`API request failed: ${response.status} ${response.statusText}`);
        }
        
        try {
            return responseText ? JSON.parse(responseText) : {};
        } catch (e) {
            console.error('Failed to parse JSON response:', e);
            throw new Error('Invalid JSON response from server');
        }
    } catch (error) {
        console.error('API request error:', error);
        throw error;
    }
}

// Show toast notification
function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toast-container') || (() => {
        const container = document.createElement('div');
        container.id = 'toast-container';
        container.style.position = 'fixed';
        container.style.top = '20px';
        container.style.right = '20px';
        container.style.zIndex = '9999';
        document.body.appendChild(container);
        return container;
    })();

    const toast = document.createElement('div');
    toast.className = `toast show align-items-center text-white bg-${type} border-0`;
    toast.role = 'alert';
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');
    
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi ${getToastIcon(type)} me-2"></i>
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    `;
    
    toastContainer.appendChild(toast);
    
    // Auto-remove toast after 5 seconds
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 150);
    }, 5000);
}

// Get icon for toast
function getToastIcon(type) {
    switch (type) {
        case 'success': return 'bi-check-circle';
        case 'danger': return 'bi-x-circle';
        case 'warning': return 'bi-exclamation-triangle';
        default: return 'bi-info-circle';
    }
}

// Load users for the users tab
async function loadUsers() {
    const usersTab = document.getElementById('users-tab');
    if (!usersTab) return;
    
    // Show loading state
    usersTab.innerHTML = `
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading users...</span>
            </div>
        </div>
    `;
    
    try {
        const users = await makeApiRequest('/api/admin/users');
        renderUsersTable(users);
    } catch (error) {
        console.error('Failed to load users:', error);
        usersTab.innerHTML = `
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                Failed to load users: ${error.message}
            </div>
        `;
    }
}

// Render users in the table with enhanced UI and functionality
function renderUsersTable(users) {
    const usersTab = document.getElementById('users-tab');
    if (!usersTab) return;
    
    if (!users || users.length === 0) {
        usersTab.innerHTML = `
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i> No users found
            </div>
        `;
        return;
    }
    
    usersTab.innerHTML = `
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Admin</th>
                        <th>Status</th>
                        <th>Last Login</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="users-list">
                    ${users.map(user => `
                        <tr>
                            <td>${user.id}</td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <span class="avatar me-2">
                                        <i class="bi bi-person"></i>
                                    </span>
                                    <span>${escapeHtml(user.username)}</span>
                                </div>
                            </td>
                            <td>${escapeHtml(user.email || 'N/A')}</td>
                            <td>
                                <span class="badge ${user.isAdmin ? 'bg-success' : 'bg-secondary'}">
                                    ${user.isAdmin ? 'Admin' : 'User'}
                                </span>
                            </td>
                            <td>
                                <span class="badge ${user.isActive ? 'bg-success' : 'bg-secondary'}">
                                    <i class="bi ${user.isActive ? 'bi-check-circle' : 'bi-x-circle'} me-1"></i>
                                    ${user.isActive ? 'Active' : 'Inactive'}
                                </span>
                            </td>
                            <td>${user.lastLogin ? new Date(user.lastLogin).toLocaleString() : 'Never'}</td>
                            <td>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button" class="btn btn-outline-primary" onclick="editUser('${user.id}')">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-danger" onclick="deleteUser('${user.id}')">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                    ${!user.isAdmin ? `
                                        <button type="button" class="btn ${user.isActive ? 'btn-outline-warning' : 'btn-outline-success'}" 
                                                onclick="toggleUserStatus('${user.id}', ${!user.isActive})">
                                            <i class="bi ${user.isActive ? 'bi-lock' : 'bi-unlock'}"></i>
                                        </button>
                                    ` : ''}
                                </div>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
        <div class="d-flex justify-content-between align-items-center mt-3">
            <div class="text-muted">
                Showing ${users.length} of ${users.length} users
            </div>
            <button class="btn btn-primary" onclick="showAddUserModal()">
                <i class="bi bi-plus-lg me-1"></i> Add User
            </button>
        </div>
    `;
}

// Helper function to escape HTML
function escapeHtml(unsafe) {
    if (!unsafe) return '';
    return unsafe
        .toString()
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
}

// Toggle user active status
async function toggleUserStatus(userId, newStatus) {
    if (!confirm(`Are you sure you want to ${newStatus ? 'activate' : 'deactivate'} this user?`)) {
        return;
    }

    try {
        await makeApiRequest(`/api/admin/users/${userId}/status`, {
            method: 'PATCH',
            body: JSON.stringify({ isActive: newStatus })
        });

        showToast(`User ${newStatus ? 'activated' : 'deactivated'} successfully`, 'success');
        loadUsers(); // Refresh the users list
    } catch (error) {
        console.error('Error toggling user status:', error);
        showToast(error.message || 'Failed to update user status', 'error');
    }
}

// Edit user
function editUser(userId) {
    // Implementation for editing a user
    console.log('Edit user:', userId);
    showToast('Edit user functionality coming soon', 'info');
}

// Delete user with confirmation
async function deleteUser(userId) {
    if (!confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
        return;
    }

    try {
        await makeApiRequest(`/api/admin/users/${userId}`, {
            method: 'DELETE'
        });

        showToast('User deleted successfully', 'success');
        loadUsers(); // Refresh the users list
    } catch (error) {
        console.error('Error deleting user:', error);
        showToast(error.message || 'Failed to delete user', 'error');
    }
}

// Show add user modal
function showAddUserModal() {
    // Implementation for showing add user modal
    console.log('Show add user modal');
    showToast('Add user functionality coming soon', 'info');
}

// Initialize admin panel
document.addEventListener('DOMContentLoaded', async () => {
    // Check if user is admin
    try {
        const user = await makeApiRequest('/api/auth/me');
        
        if (!user || !user.isAdmin) {
            window.location.href = '/login.html';
            return;
        }
        
        // Load initial data
        loadUsers();
        
        // Initialize tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
        
        adminInitialized = true;
    } catch (error) {
        console.error('Error initializing admin panel:', error);
        showToast('Failed to initialize admin panel', 'error');
        window.location.href = '/login.html';
    }
});
